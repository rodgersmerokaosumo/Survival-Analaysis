# Create an imputation model
imputation_model <- mice(data, method = "pmm", m = 5, maxit = 1000, seed = 123)
# Load necessary libraries for survival analysis
library(survival)
library(survminer)
# Create an imputation model
imputation_model <- mice(data, method = "pmm", m = 5, maxit = 100, seed = 123)
# Impute the missing values
imputed_data <- complete(imputation_model)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~., data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~age_at_heart_attack, data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
xlab = "Survival Time (months)", ylab = "Survival Probability",
title = "Survival Analysis by Age at Heart Attack")
# Load required library
library(survival)
# Create the survival object
surv_obj <- with(heart_data, Surv(survival, still_alive))
# Calculate the Kaplan-Meier estimator
km_estimate <- survfit(surv_obj ~ 1)
# Print the Kaplan-Meier estimator
print(km_estimate)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Print the Surv object
print(survival_object)
# Fit a Kaplan-Meier model using the survfit function
fit <- survfit(survival_object ~ 1, data = heart_data)
# Generate a Kaplan-Meier curve using the plot function
plot(fit)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Print the Surv object
print(survival_object)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Print the Surv object
print(survival_object)
# Fit a Kaplan-Meier model using the survfit function
fit <- survfit(survival_object ~ 1, data = heart_data)
# Generate a Kaplan-Meier curve using the plot function
plot(fit)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~age_at_heart_attack, data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Fit a Kaplan-Meier model using the survfit function
fit <- survfit(survival_object ~ 1, data = heart_data)
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
xlab = "Survival Time (months)", ylab = "Survival Probability",
title = "Survival Analysis by Age at Heart Attack")+theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
library(tidyverse)
library(survival)
library(janitor)
# Specify the file path
file_path <- "echocardiogram.data"
# Read the file into a data frame
data <- read.csv(file_path, header = FALSE, na.strings = "?")
# Assuming `data` is your data frame
column_names <- c("survival", "still-alive", "age-at-heart-attack", "pericardial-effusion", "fractional-shortening", "epss", "lvdd", "wall-motion-score", "wall-motion-index", "mult", "name", "group", "alive-at-1")
colnames(data) <- column_names
head(data)
# Explore the structure of the dataset
data = data |> clean_names()
data <- data %>%
mutate_all(~ifelse(. == "?", NA, .))
data <- data %>%
select(-name)
data |> glimpse()
data <- data %>%
mutate(
still_alive = factor(still_alive),
pericardial_effusion = factor(pericardial_effusion),
alive_at_1 = factor(alive_at_1)
)
data <- data %>%
mutate(
survival = as.numeric(survival),
age_at_heart_attack = as.numeric(age_at_heart_attack),
fractional_shortening = as.numeric(fractional_shortening),
epss = as.numeric(epss),
lvdd = as.numeric(lvdd),
wall_motion_score = as.numeric(wall_motion_score),
wall_motion_index = as.numeric(wall_motion_index),
mult = as.numeric(mult)
)
head(data)
summary(data)
# Calculate the number of missing values in each column
colSums(is.na(data))
#impute missing values with the median
data <- data %>%
mutate(across(where(is.numeric), ~replace_na(., mean(.))))
library(tidyverse)
library(knitr)
# Assuming `data` is your data frame
# View the summary statistics of numeric columns
summary_stats <- data %>%
select(where(is.numeric)) %>%
summary()
# Print the summary statistics in a table using kable
kable(summary_stats)
# Visualize the distribution of numeric variables
numeric_vars <- names(data)[sapply(data, is.numeric)]
# Create histograms for numeric variables
histograms <- data %>%
select(all_of(numeric_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_histogram(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Numeric Variables")+theme_minimal()
# Print the histograms
print(histograms)
# Visualize the distribution of factor variables
factor_vars <- names(data)[sapply(data, is.factor)]
# Create bar plots for factor variables
barplots <- data %>%
select(all_of(factor_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_bar(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Factor Variables")+theme_minimal()
# Print the bar plots
print(barplots)
# Load necessary libraries for survival analysis
library(survival)
library(survminer)
# Create an imputation model
imputation_model <- mice(data, method = "pmm", m = 5, maxit = 100, seed = 123)
# Impute the missing values
imputed_data <- complete(imputation_model)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~age_at_heart_attack, data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
xlab = "Survival Time (months)", ylab = "Survival Probability",
title = "Survival Analysis by Age at Heart Attack")
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
data <- data %>%
mutate(
still_alive = factor(still_alive),
pericardial_effusion = factor(pericardial_effusion),
alive_at_1 = factor(alive_at_1),
group = factor(group)
)
data <- data %>%
mutate(
survival = as.numeric(survival),
age_at_heart_attack = as.numeric(age_at_heart_attack),
fractional_shortening = as.numeric(fractional_shortening),
epss = as.numeric(epss),
lvdd = as.numeric(lvdd),
wall_motion_score = as.numeric(wall_motion_score),
wall_motion_index = as.numeric(wall_motion_index),
mult = as.numeric(mult)
)
head(data)
# Load the necessary libraries
library(tidyverse)
library(survival)
library(survminer)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Fit a Kaplan-Meier model stratified by group using the survfit function
fit_stratified <- survfit(survival_object ~ alive_at_1, data = heart_data)
# Display the strata using the summary function
summary(fit_stratified)
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = heart_data)
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
library(tidyverse)
library(survival)
library(janitor)
# Specify the file path
file_path <- "echocardiogram.data"
# Read the file into a data frame
data <- read.csv(file_path, header = FALSE, na.strings = "?")
# Assuming `data` is your data frame
column_names <- c("survival", "still-alive", "age-at-heart-attack", "pericardial-effusion", "fractional-shortening", "epss", "lvdd", "wall-motion-score", "wall-motion-index", "mult", "name", "group", "alive-at-1")
colnames(data) <- column_names
head(data)
# Explore the structure of the dataset
data = data |> clean_names()
data <- data %>%
mutate_all(~ifelse(. == "?", NA, .))
data <- data %>%
select(-name)
data |> glimpse()
data <- data %>%
mutate(
still_alive = factor(still_alive),
pericardial_effusion = factor(pericardial_effusion),
alive_at_1 = factor(alive_at_1),
group = factor(group)
)
data <- data %>%
mutate(
survival = as.numeric(survival),
age_at_heart_attack = as.numeric(age_at_heart_attack),
fractional_shortening = as.numeric(fractional_shortening),
epss = as.numeric(epss),
lvdd = as.numeric(lvdd),
wall_motion_score = as.numeric(wall_motion_score),
wall_motion_index = as.numeric(wall_motion_index),
mult = as.numeric(mult)
)
head(data)
summary(data)
# Calculate the number of missing values in each column
colSums(is.na(data))
#impute missing values with the median
data <- data %>%
mutate(across(where(is.numeric), ~replace_na(., mean(.))))
library(tidyverse)
library(knitr)
# Assuming `data` is your data frame
# View the summary statistics of numeric columns
summary_stats <- data %>%
select(where(is.numeric)) %>%
summary()
# Print the summary statistics in a table using kable
kable(summary_stats)
# Visualize the distribution of numeric variables
numeric_vars <- names(data)[sapply(data, is.numeric)]
# Create histograms for numeric variables
histograms <- data %>%
select(all_of(numeric_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_histogram(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Numeric Variables")+theme_minimal()
# Print the histograms
print(histograms)
# Visualize the distribution of factor variables
factor_vars <- names(data)[sapply(data, is.factor)]
# Create bar plots for factor variables
barplots <- data %>%
select(all_of(factor_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_bar(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Factor Variables")+theme_minimal()
# Print the bar plots
print(barplots)
# Load necessary libraries for survival analysis
library(survival)
library(survminer)
# Create an imputation model
imputation_model <- mice(data, method = "pmm", m = 5, maxit = 100, seed = 123)
# Impute the missing values
imputed_data <- complete(imputation_model)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~age_at_heart_attack, data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Load the necessary libraries
library(tidyverse)
library(survival)
library(survminer)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Fit a Kaplan-Meier model stratified by group using the survfit function
fit_stratified <- survfit(survival_object ~ alive_at_1, data = heart_data)
# Display the strata using the summary function
summary(fit_stratified)
knitr::opts_chunk$set(echo = TRUE)
# Load required packages
library(tidyverse)
library(survival)
library(janitor)
# Specify the file path
file_path <- "echocardiogram.data"
# Read the file into a data frame
data <- read.csv(file_path, header = FALSE, na.strings = "?")
# Assuming `data` is your data frame
column_names <- c("survival", "still-alive", "age-at-heart-attack", "pericardial-effusion", "fractional-shortening", "epss", "lvdd", "wall-motion-score", "wall-motion-index", "mult", "name", "group", "alive-at-1")
colnames(data) <- column_names
head(data)
# Explore the structure of the dataset
data = data |> clean_names()
data <- data %>%
mutate_all(~ifelse(. == "?", NA, .))
data <- data %>%
select(-name)
data |> glimpse()
data <- data %>%
mutate(
still_alive = factor(still_alive),
pericardial_effusion = factor(pericardial_effusion),
alive_at_1 = factor(alive_at_1),
group = factor(group)
)
data <- data %>%
mutate(
survival = as.numeric(survival),
age_at_heart_attack = as.numeric(age_at_heart_attack),
fractional_shortening = as.numeric(fractional_shortening),
epss = as.numeric(epss),
lvdd = as.numeric(lvdd),
wall_motion_score = as.numeric(wall_motion_score),
wall_motion_index = as.numeric(wall_motion_index),
mult = as.numeric(mult)
)
head(data)
summary(data)
# Calculate the number of missing values in each column
colSums(is.na(data))
#impute missing values with the median
data <- data %>%
mutate(across(where(is.numeric), ~replace_na(., mean(.))))
library(tidyverse)
library(knitr)
# Assuming `data` is your data frame
# View the summary statistics of numeric columns
summary_stats <- data %>%
select(where(is.numeric)) %>%
summary()
# Print the summary statistics in a table using kable
kable(summary_stats)
# Visualize the distribution of numeric variables
numeric_vars <- names(data)[sapply(data, is.numeric)]
# Create histograms for numeric variables
histograms <- data %>%
select(all_of(numeric_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_histogram(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Numeric Variables")+theme_minimal()
# Print the histograms
print(histograms)
# Visualize the distribution of factor variables
factor_vars <- names(data)[sapply(data, is.factor)]
# Create bar plots for factor variables
barplots <- data %>%
select(all_of(factor_vars)) %>%
pivot_longer(everything(), names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value)) +
geom_bar(fill = "dodgerblue", color = "white") +
facet_wrap(~ Variable, scales = "free") +
labs(title = "Distribution of Factor Variables")+theme_minimal()
# Print the bar plots
print(barplots)
# Load necessary libraries for survival analysis
library(survival)
library(survminer)
# Create an imputation model
imputation_model <- mice(data, method = "pmm", m = 5, maxit = 100, seed = 123)
# Impute the missing values
imputed_data <- complete(imputation_model)
heart_data <- imputed_data
# Convert still_alive variable to integer
heart_data$still_alive <- as.integer(as.character(heart_data$still_alive))
# Perform survival analysis using the Cox proportional hazards model
surv_model <- coxph(Surv(survival, still_alive) ~age_at_heart_attack, data = heart_data)
# Summarize the results of the survival analysis
summary(surv_model)
# Visualize the survival curves based on age groups
ggsurvplot(survfit(surv_model), data = heart_data, pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Load the necessary libraries
library(tidyverse)
library(survival)
library(survminer)
# Create a Surv object to represent the survival time and censoring information
survival_object <- with(heart_data, Surv(survival, still_alive))
# Fit a Kaplan-Meier model stratified by group using the survfit function
fit_stratified <- survfit(survival_object ~ alive_at_1, data = heart_data)
# Display the strata using the summary function
summary(fit_stratified)
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = heart_data, , pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = fit_stratified, , pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = fit_stratified, pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = fit_stratified,
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),  xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = fit_stratified,
ggtheme = theme_light())
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ group, data = fit_stratified)
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data,pval = TRUE,
conf.int = TRUE,
surv.median.line = "hv",
ggtheme = theme_light(),
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 60),
xlab = "Time in months",
ylab = "Survival probability",
title = "Kaplan-Meier Estimate of Survival",
subtitle = "Heart Attack Data")
# Generate a Kaplan-Meier curve for each stratum using the ggsurvplot function from the survminer package
ggsurvplot(fit_stratified, data = heart_data)
# Perform a log-rank test to compare the survival curves of the two groups
survdiff(survival_object ~ alive_at_1, data = heart_data)
